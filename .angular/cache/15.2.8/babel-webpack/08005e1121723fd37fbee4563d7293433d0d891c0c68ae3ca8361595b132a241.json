{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { environment } from '../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WeatherService {\n  constructor(http) {\n    this.http = http;\n  }\n  getWeatherData(cityName) {\n    let URLWithCity = \"\";\n    URLWithCity = environment.weatherApiBaseUrl + \"/city/\" + cityName;\n    return this.http.get(URLWithCity, {\n      headers: new HttpHeaders().set(environment.XRapidAPIHostHeaderName, environment.XRapidAPIHostHeaderValue).set(environment.XRapidAPIKeyHeaderName, environment.XRapidAPIKeyHeaderValue)\n    });\n  }\n}\nWeatherService.ɵfac = function WeatherService_Factory(t) {\n  return new (t || WeatherService)(i0.ɵɵinject(i1.HttpClient));\n};\nWeatherService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: WeatherService,\n  factory: WeatherService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAqBA,WAAW,QAAoB,sBAAsB;AAG1E,SAASC,WAAW,QAAQ,6BAA6B;;;AAKzD,OAAM,MAAOC,cAAc;EAEzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAgB;EAEtCC,cAAc,CAACC,QAAgB;IAC5B,IAAIC,WAAW,GAAY,EAAE;IAC7BA,WAAW,GAAGN,WAAW,CAACO,iBAAiB,GAAG,QAAQ,GAAGF,QAAQ;IACjE,OAAO,IAAI,CAACF,IAAI,CAACK,GAAG,CAAcF,WAAW,EAAE;MAC9CG,OAAO,EAAE,IAAIV,WAAW,EAAE,CACzBW,GAAG,CAACV,WAAW,CAACW,uBAAuB,EAAEX,WAAW,CAACY,wBAAwB,CAAC,CAC9EF,GAAG,CAACV,WAAW,CAACa,sBAAsB,EAACb,WAAW,CAACc,uBAAuB;KAC5E,CAAC;EAEJ;;AAbSb,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["HttpHeaders","environment","WeatherService","constructor","http","getWeatherData","cityName","URLWithCity","weatherApiBaseUrl","get","headers","set","XRapidAPIHostHeaderName","XRapidAPIHostHeaderValue","XRapidAPIKeyHeaderName","XRapidAPIKeyHeaderValue","factory","providedIn"],"sourceRoot":"","sources":["/Users/ayushkgu/Github Repositories/Weather-App-Angular/src/app/services/weather.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { WeatherData } from '../models/weather.model';\nimport { environment } from '../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WeatherService {\n\n  constructor(private http: HttpClient) { }\n\n    getWeatherData(cityName: string): Observable<WeatherData>{\n       let URLWithCity: string  = \"\";\n       URLWithCity = environment.weatherApiBaseUrl + \"/city/\" + cityName;\n       return this.http.get<WeatherData>(URLWithCity, {\n        headers: new HttpHeaders()\n        .set(environment.XRapidAPIHostHeaderName, environment.XRapidAPIHostHeaderValue)\n        .set(environment.XRapidAPIKeyHeaderName,environment.XRapidAPIKeyHeaderValue)\n      })\n\n    }\n}\n\n// export class WeatherService {\n//   private apiKey = 'ef701631aemsh2fd53e905723599p1438ffjsn682e7a736e03';\n//   private apiUrl = 'weatherbit-v1-mashape.p.rapidapi.com';\n\n//   constructor(private http: HttpClient) { }\n\n//   getWeatherByLocation(location: string): Observable<any> {\n//     const url = `${this.apiUrl}?city=${location}&key=${this.apiKey}`;\n//     return this.http.get<any>(url);\n//   }\n// }\n\n\n\n\n\n// import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\n// import { Injectable } from '@angular/core';\n// import { Observable } from 'rxjs';\n// // import { environment } from '../environments/environment';\n// // import { WeatherData } from '../models/weather.model';\n\n// @Injectable({\n//   providedIn: 'root'\n// })\n\n// export class WeatherService {\n//   private apiKey = 'ef701631aemsh2fd53e905723599p1438ffjsn682e7a736e03';\n//   private apiUrl = 'weatherbit-v1-mashape.p.rapidapi.com';\n\n//   constructor(private http: HttpClient) { }\n\n//   getWeatherByLocation(location: string): Observable<any> {\n//     const url = `${this.apiUrl}?city=${location}&key=${this.apiKey}`;\n//     return this.http.get<any>(url);\n//   }\n// }\n\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}